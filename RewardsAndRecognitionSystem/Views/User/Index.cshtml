@model IEnumerable<RewardsAndRecognitionRepository.Models.User>

@{
    var userRoles = ViewBag.UserRoles as Dictionary<string, string>;
    var roles = ViewBag.Roles as List<string>;
    var selectedRole = ViewBag.SelectedRole as string;
    var nameQuery = ViewBag.NameQuery as string;
    ViewData["Title"] = "Users List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --indigo-main: #3f51b5;
        --indigo-light: #5c6bc0;
        --indigo-dark: #303f9f;
        --danger: #c62828;
        --danger-hover: #b71c1c;
        --text-light: #fff;
        --success: #4caf50;
        --success-dark: #388e3c;
    }

    .user-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 30px 0 20px;
        flex-wrap: wrap;
        gap: 10px;
    }

    .create-btn, .excel-btn {
        padding: 10px 20px;
        border-radius: 6px;
        font-weight: 500;
        border: none;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        color: var(--text-light);
    }

    .create-btn {
        background: linear-gradient(to right, var(--indigo-main), var(--indigo-light));
    }

    .excel-btn {
        background: linear-gradient(to right, var(--success), var(--success-dark));
    }

    .users-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.08);
        overflow: hidden;
    }

        .users-table th, .users-table td {
            padding: 14px 16px;
            text-align: left;
        }

        .users-table th {
            background: linear-gradient(to right, var(--indigo-main), var(--indigo-light));
            color: white;
            font-weight: 600;
        }

        .users-table tr:nth-child(even) {
            background-color: #f5f5f5;
        }

        .users-table tr:hover {
            background-color: #eef1f7;
        }

    .btn {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 1.1rem;
        padding: 6px;
    }

    .btn-edit i {
        color: var(--indigo-main);
    }

    .btn-edit:hover i {
        color: var(--indigo-dark);
    }

    .btn-delete i {
        color: var(--danger);
    }

    .btn-delete:hover i {
        color: var(--danger-hover);
    }

    .filter-form select,
    .filter-form input[type="text"] {
        min-width: 180px;
        padding: 6px 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        font-size: 0.9rem;
    }

    .clear-btn {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        background: transparent;
        border: none;
        font-size: 1rem;
        color: #999;
        cursor: pointer;
    }

    .filter-wrapper {
        position: relative;
    }
</style>

<div class="user-header">
    <h2><i class="bi bi-people-fill me-2"></i> Users</h2>

    <div class="d-flex align-items-center gap-3 flex-wrap">
        <form asp-action="Index" method="get" class="d-flex align-items-center gap-2 filter-form">
            <select name="role" class="form-select form-select-sm" onchange="this.form.submit()">
                <option value="">-- All Roles --</option>
                @foreach (var role in roles)
                {
                    <option value="@role" selected="@(role == selectedRole)">@role</option>
                }
            </select>

            <div class="filter-wrapper">
                <input type="text" name="name" value="@nameQuery" placeholder="Search by name..." oninput="this.form.submit()" />
                @if (!string.IsNullOrWhiteSpace(nameQuery))
                {
                    <button type="button" class="clear-btn" onclick="document.querySelector('[name=name]').value=''; this.form.submit();">×</button>
                }
            </div>
        </form>

        <a asp-action="ExportToExcel" asp-route-role="@selectedRole" asp-route-name="@nameQuery" class="excel-btn">
            <i class="bi bi-file-earmark-excel-fill"></i> Export to Excel
        </a>

        <a asp-action="Create" class="create-btn">
            <i class="bi bi-person-plus-fill"></i> Create User
        </a>
    </div>
</div>

<div id="userTableContainer">
    @await Html.PartialAsync("_UserTablePartial", Model)
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content rounded-4 border-0 shadow-sm">
            <div class="modal-header">
                <h5 class="modal-title fw-semibold" id="editUserModalLabel">Edit User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="closeModal()"></button>
            </div>
            <div class="modal-body p-4" id="editUserModalBody">
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Form -->
<form id="deleteForm" method="post" asp-action="Delete">
    <input type="hidden" name="id" id="deleteUserId" />
</form>

@section Scripts {
    <script>
        function confirmDelete(userId) {
            if (confirm("Are you sure you want to delete this user?")) {
                document.getElementById("deleteUserId").value = userId;
                document.getElementById("deleteForm").submit();
            }
        }

        function openEditModal(userId) {
            const modal = new bootstrap.Modal(document.getElementById('editUserModal'));
            modal.show();

            fetch(`/User/EditPartial/${userId}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('editUserModalBody').innerHTML = html;
                });
        }

        function closeModal() {
            const modalElement = document.getElementById('editUserModal');
            const modal = bootstrap.Modal.getInstance(modalElement);
            modal.hide();
        }

        document.addEventListener('submit', function (e) {
            if (e.target && e.target.id === 'editUserForm') {
                e.preventDefault();
                const form = e.target;
                const formData = new FormData(form);

                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                .then(res => {
                    const contentType = res.headers.get("content-type");
                    if (res.ok && contentType && contentType.includes("application/json")) {
                        return res.json();
                    } else {
                        return res.text().then(html => { throw html; });
                    }
                })
                .then(json => {
                    if (json.success) {
                        closeModal();
                        location.reload();
                    }
                })
                .catch(html => {
                    document.getElementById('editUserModalBody').innerHTML = html;
                });
            }
        });
    </script>
}
